name: Build

on:
  push:
    branches: [main, dev, pre-release]
    tags: ['v*']
  pull_request:
    branches: [main, dev]
  workflow_dispatch:
env:
  LATEST_PY_VERSION: '3.9'
  COVERAGE_ARGS: '--cov --cov-report=term --cov-report=html'
  XDIST_ARGS: '--numprocesses=auto --dist=loadfile'

jobs:
  test:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, 3.10.0-beta.4]
    services:
      nginx:
        image: kennethreitz/httpbin
        ports:
          - 80:80

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - uses: snok/install-poetry@v1.1.8
        with:
          version: 1.2.0a2
          virtualenvs-in-project: true

      # Start integration test databases
      - uses: supercharge/mongodb-github-action@1.3.0
        with:
          mongodb-version: 4.4
      - uses: supercharge/redis-github-action@1.2.0
        with:
          redis-version: '6'
      - uses: rrainn/dynamodb-action@v2.0.0

      # Cache packages per python version, and reuse until lockfile changes
      - name: Cache python packages
        id: cache
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install -v -E all

      # Run tests with coverage report                                                               
      - name: Run tests                                                                              
        run: |
          source $VENV
          pytest -rs test/unit ${{ env.XDIST_ARGS }} ${{ env.COVERAGE_ARGS }}                    
          pytest -rs test/integration --cov-append ${{ env.XDIST_ARGS }} ${{ env.COVERAGE_ARGS }}
                                                                                                    
      # Latest python version: send coverage report to coveralls                                     
      - name: Run coveralls                                                                          
        if: ${{ matrix.python-version == env.LATEST_PY_VERSION }}                                    
        env:                                                                                         
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}                                                  
        run: |                                                                                       
          source $VENV                                                                               
          pip install coveralls                                                                      
          coveralls --service=github                                                                 


  # Run code analysis checks
  analyze:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.LATEST_PY_VERSION }}
      - uses: snok/install-poetry@v1.1.8
        with:
          version: 1.2.0a2
          virtualenvs-in-project: true

     # Cache packages and reuse until lockfile changes
      - name: Cache python packages
        id: cache
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ env.LATEST_PY_VERSION }}-${{ hashFiles('poetry.lock') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: poetry install -v -E all

      - name: Run style checks, type checks, and linting
        run: |
          source $VENV
          black --check --diff .
          isort --check --diff .
          flake8 aiohttp_client_cache test
          mypy .

  # Deploy on tags only
  release:
    needs: [test, analyze]
    if: startsWith(github.ref, 'refs/tags/v') || endsWith(github.ref, '/pre-release')
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ env.LATEST_PY_VERSION }}
      - uses: snok/install-poetry@v1.1.8
        with:
          version: 1.2.0a2
          virtualenvs-in-project: true

      - name: Set pre-release version number
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: poetry version $(poetry version -s).dev${GITHUB_RUN_NUMBER}
      - name: Build and publish to pypi
        run: |
          poetry build
          poetry publish -u  __token__ -p ${{ secrets.PYPI_TOKEN }}
